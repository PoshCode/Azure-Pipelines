parameters:
  specDirectory: '$(Build.SourcesDirectory)/Specs'
  includeTag: []
  excludeTag: []
  additionalModulePaths: []
  codeCoverageDirectory: ''
  testRunTitle: 'Gherkin'
  show: 'All'

steps:
- powershell: |
    Import-Module Pester -Passthru

    $Options = @{
        Path = Convert-Path "${{ parameters.specDirectory }}"
        OutputFormat = "NUnitXml"
        OutputFile = Join-Path '$(Common.TestResultsDirectory)' 'Test-$(Build.SourceVersion).xml'
        Show = "${{ parameters.show }}"
    }

    if ($CodeCoverage = "${{ parameters.codeCoverageDirectory }}") {
        $Options.CodeCoverage = Get-ChildItem $CodeCoverage -Recurse -Include *.psm1, *.ps1 | Convert-Path
        # I really need to get the Gherkin CodeCoverage Output fixed
        # $Options.CodeCoverageOutputFile = '$(Common.TestResultsDirectory)/Coverage-$(Build.SourceVersion).xml'
    }

    if ($IncludeTag = @("${{ join('", "', parameters.includeTag) }}")) {
        Write-Verbose "IncludeTag $($IncludeTag -join ', ')" -Verbose
        $Options.Tag = $IncludeTag
    }

    if ($ExcludeTag = @("${{ join('", "', parameters.excludeTag) }}")) {
        Write-Verbose "ExcludeTag $($ExcludeTag -join ', ')" -Verbose
        $Options.ExcludeTag = $ExcludeTag
    }

    if ($AdditionalModulePaths = @("${{ join('", "', parameters.additionalModulePaths) }}")) {
        $Env:PSModulePath = @(
            @($AdditionalModulePaths -split [IO.Path]::PathSeparator | % TrimEnd(':;')) +
            @($Env:PSModulePath -split [IO.Path]::PathSeparator | % TrimEnd(':;'))
        ) -join [IO.Path]::PathSeparator
        Write-Verbose "PSModulePath $Env:PSModulePath" -Verbose
    }

    Write-Host $($Options | Out-String)
    if (!$PSVersionTable.OS) {
        $PSVersionTable.OS = [System.Environment]::OSVersion
    }

    Write-Host "##vso[task.setvariable variable=PSPlatform]PowerShell $($PSVersionTable['PSVersion','OS'] -join ' on ')"
    Invoke-Gherkin @Options
  displayName: Invoke-Gherkin

# - task: PublishCodeCoverageResults@1
#   displayName: Publish Code Coverage
#   inputs:
#     summaryFileLocation: '$(Common.TestResultsDirectory)/Coverage-$(Build.SourceVersion).xml'
#     pathToSources: ${{ parameters.codeCoverageDirectory }}
#     failIfCoverageEmpty: true
#   condition: |
#     and(
#         succeededOrFailed(),
#         ne('', '${{ parameters.codeCoverageDirectory }}')
#     )

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '$(Common.TestResultsDirectory)/Test-$(Build.SourceVersion).xml'
    buildPlatform: $(PSPlatform)
    buildConfiguration: ${{ parameters.configurationName }}
    failTaskOnFailedTests: true
    testRunTitle: "${{ parameters.testRunTitle }} on $(PSPlatform)"
  condition: succeededOrFailed()
